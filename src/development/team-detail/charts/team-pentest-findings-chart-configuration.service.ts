import { Injectable } from '@angular/core';
import {
  AbstractResourceChartConfiguration,
  ChartColor,
  ResourceData,
} from '../../../chart';
import {
  ParsedDevelopmentDataModel,
  PenTestFinding,
  ProductTeam,
} from '../../../shared';
import { ChartData, ChartType } from 'chart.js';
import { RouteData } from '../../../shared/util/routes';
import { DevelopmentFilterService } from '../../../analyzation/filter/development-filter.service';
import { getReleaseLabel } from '../../../shared/util/formats';

@Injectable({
  providedIn: 'root',
})
export class TeamPentestFindingsChartConfigurationService extends AbstractResourceChartConfiguration<
  ParsedDevelopmentDataModel,
  ProductTeam,
  'bar'
> {
  constructor(private developmentFilterService: DevelopmentFilterService) {
    super(RouteData.CURRENT_TEAM);
  }

  dataSource$ = this.developmentFilterService.filteredData$;
  chartLegend = true;
  chartTitle = 'Pentest Severity heatmap';
  chartType: ChartType = 'bar';
  override chartOptions = {
    responsive: true,
    scales: {
      y: {
        stacked: true,
        min: 0,
        ticks: {
          precision: 0,
        },
      },
      x: {
        stacked: true,
      },
    },
  };

  protected collectChartData(
    data: ResourceData<ParsedDevelopmentDataModel, ProductTeam>
  ): ChartData<'bar'> {
    const matchingReleases = data.data.productReleases.filter(
      (release) => release.productId === data.resource.id
    );

    const findingsPerRelease = Object.fromEntries(
      matchingReleases.map((release) => [
        release.id,
        data.data.penTestFindings.filter(
          (finding) => finding.releaseId === release.id
        ),
      ])
    );

    return {
      labels: Object.keys(findingsPerRelease).map((id) => {
        const target = matchingReleases.find((x) => x.id === id);
        return target ? getReleaseLabel(target) : '';
      }),
      datasets: [
        this.createDataset(
          'Critical',
          this.getNumberOfFindingsBetweenSeverities(findingsPerRelease, 9, 11),
          'rgba(0, 0, 0, 1)',
          true,
          true
        ),
        this.createDataset(
          'High',
          this.getNumberOfFindingsBetweenSeverities(findingsPerRelease, 6, 9),
          ChartColor.HILTI_RED,
          true,
          true
        ),
        this.createDataset(
          'Medium',
          this.getNumberOfFindingsBetweenSeverities(findingsPerRelease, 3, 6),
          'rgba(251, 140, 0, 1)',
          true,
          true
        ),
        this.createDataset(
          'Low',
          this.getNumberOfFindingsBetweenSeverities(findingsPerRelease, 0, 3),
          'rgba(253, 216, 53, 1)',
          true,
          true
        ),
      ],
    };
  }

  addDataset(
    findingsPerRelease: { [p: string]: PenTestFinding[] },
    severity: number,
    color: string
  ) {
    return this.createDataset(
      '' + severity,
      this.getNumberOfFindingsForSeverity(findingsPerRelease, severity),
      color,
      true,
      true
    );
  }

  private getNumberOfFindingsForSeverity(
    findingsPerRelease: { [p: string]: PenTestFinding[] },
    severity: number
  ): number[] {
    const matchingFindings = [];
    for (const releaseId in findingsPerRelease) {
      const numberOfFindings = findingsPerRelease[releaseId].filter(
        (finding) => finding.severity === severity
      );
      matchingFindings.push(numberOfFindings.length);
    }
    return matchingFindings;
  }

  private getNumberOfFindingsBetweenSeverities(
    findingsPerRelease: { [p: string]: PenTestFinding[] },
    lowerBound: number,
    upperBound: number
  ): number[] {
    const findingsInBounds = [];

    for (const releaseId in findingsPerRelease) {
      const numberOfFindings = findingsPerRelease[releaseId].filter(
        (finding) =>
          finding.severity >= lowerBound && finding.severity < upperBound
      );

      findingsInBounds.push(numberOfFindings.length);
    }
    return findingsInBounds;
  }
}
