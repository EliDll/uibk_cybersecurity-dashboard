import { Injectable } from '@angular/core';
import { ChartData, ChartType } from 'chart.js';
import { DevelopmentFilterService } from 'src/analyzation/filter/development-filter.service';
import {
  AbstractResourceChartConfiguration,
  ChartColor,
  ResourceData,
} from 'src/chart';
import { ParsedDevelopmentDataModel, ProductTeam } from 'src/shared';
import { RouteData } from 'src/shared/util/routes';
import { sortByDate } from 'src/utils/array.utils';
import { getReleaseLabel } from '../../../shared/util/formats';

@Injectable({
  providedIn: 'root',
})
export class CodeScanPenTestChartConfiguration extends AbstractResourceChartConfiguration<
  ParsedDevelopmentDataModel,
  ProductTeam,
  'bar'
> {
  override chartTitle = 'Static Analysis vs. Pentest Ratio (weighted)';
  override chartLegend = true;
  override chartType: ChartType = 'bar';
  override chartOptions = {
    responsive: true,
    scales: {
      x: {
        stacked: true,
      },
      y: {
        stacked: true,
        ticks: {
          stepSize: 1,
        },
      },
    },
  };
  override dataSource$ = this.filterService.filteredData$;

  constructor(private readonly filterService: DevelopmentFilterService) {
    super(RouteData.CURRENT_TEAM);
  }

  protected override collectChartData(
    data: ResourceData<ParsedDevelopmentDataModel, ProductTeam>
  ): ChartData<'bar'> {
    const sortedReleases = sortByDate(
      data.data.productReleases.filter(
        (it) => it.productId === data.resource.id
      ),
      (it) => it.releaseDate
    );

    if (sortedReleases.length === 0) {
      return {
        datasets: [],
      };
    }

    const labels = sortedReleases.map((it) => getReleaseLabel(it));

    const countPerRelease = sortedReleases.map((it) => {
      const codeScan = data.data.codeScanFindings.filter(
        (c) => c.releaseId === it.id
      );
      const penTest = data.data.penTestFindings
        .filter((c) => c.releaseId === it.id)
        .reduce((acc, curr) => (acc += curr.severity), 0);

      return [codeScan.length, penTest];
    });

    return {
      labels: labels,
      datasets: [
        this.createDataset(
          'Static Analysis',
          countPerRelease.map((it) => it[0]),
          ChartColor.WARM_CONCRETE
        ),
        this.createDataset(
          'Pen Test Findings',
          countPerRelease.map((it) => it[1]),
          ChartColor.HILTI_RED
        ),
      ],
    };
  }
}
