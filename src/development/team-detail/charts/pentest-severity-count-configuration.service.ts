import { Injectable } from '@angular/core';
import {
  AbstractResourceChartConfiguration,
  ChartColor,
  ResourceData,
} from '../../../chart';
import {
  ParsedDevelopmentDataModel,
  ProductRelease,
  ProductTeam,
} from '../../../shared';
import { RouteData } from '../../../shared/util/routes';
import { ChartData, ChartType } from 'chart.js';
import { DevelopmentFilterService } from '../../../analyzation/filter/development-filter.service';
import { getReleaseLabel } from '../../../shared/util/formats';

@Injectable({
  providedIn: 'root',
})
export class PentestSeverityCountConfigurationService extends AbstractResourceChartConfiguration<
  ParsedDevelopmentDataModel,
  ProductTeam,
  'line'
> {
  constructor(private developmentFilterService: DevelopmentFilterService) {
    super(RouteData.CURRENT_TEAM);
  }

  chartLegend = true;
  chartTitle = 'Development Findings over time';
  chartType: ChartType = 'line';
  dataSource$ = this.developmentFilterService.filteredData$;
  override chartOptions = {
    responsive: true,
    scale: {
      beginAtZero: true,
      min: 0,
      ticks: {
        precision: 0,
      },
    },
  };

  protected collectChartData(
    data: ResourceData<ParsedDevelopmentDataModel, ProductTeam>
  ): ChartData<'line'> {
    const releases = data.data.productReleases.filter(
      (release) => release.productId === data.resource.id
    );

    return {
      labels: releases.map((release) => getReleaseLabel(release)),
      datasets: [
        this.createDataset(
          'Critical',
          this.getCountsForSeverity(releases, data.data, 9, 11),
          'rgba(0, 0, 0, 1)',
          false,
          false,
          false
        ),
        this.createDataset(
          'High',
          this.getCountsForSeverity(releases, data.data, 6, 9),
          ChartColor.HILTI_RED,
          false,
          false,
          false
        ),
        this.createDataset(
          'Medium',
          this.getCountsForSeverity(releases, data.data, 3, 6),
          'rgba(251, 140, 0, 1)',
          false,
          false,
          false
        ),
        this.createDataset(
          'Low',
          this.getCountsForSeverity(releases, data.data, 0, 3),
          'rgba(253, 216, 53, 1)',
          false,
          false,
          false
        ),
        this.createDataset(
          'Static Analysis',
          releases.map((release) => {
            return data.data.codeScanFindings.filter(
              (c) => c.releaseId === release.id
            ).length;
          }),
          ChartColor.WARM_CONCRETE,
          false,
          false,
          false
        ),
      ],
    };
  }

  private getCountsForSeverity(
    releases: ProductRelease[],
    data: ParsedDevelopmentDataModel,
    lowerBound: number,
    upperBound: number
  ): number[] {
    return releases.map(
      (release) =>
        data.penTestFindings.filter(
          (finding) =>
            finding.severity >= lowerBound &&
            finding.severity < upperBound &&
            finding.releaseId === release.id
        ).length
    );
  }
}
